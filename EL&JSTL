

一、EL表达式简介

EL表达式全称：Expression Language，即表达式语言
EL表达式作用：代替JSP页面中表达式脚本进行数据的输出
EL表达式比JSP的表达式脚本简洁很多
EL表达式的格式是：${表达式} ，注：EL表达式写在jsp页面中，表达式一般是域对象的key

二、EL表达式搜索域数据的顺序
EL表达式主要是输出域对象中的数据，当四个域对象都有同一个key的值时，EL表达式会按照四个域对象的范围从小到大进行搜索，找到就输出，与四个域对象声明的先后顺序无关
      pageContext.setAttribute("key", "pageContext");
     request.setAttribute("key", "request");
        session.setAttribute("key", "session");
        application.setAttribute("key", "application");
       

三、EL表达式输出Java类的属性

输出Person类中普通属性，数组属性，list集合属性和map集合属性（必须有get方法）

四、EL表达式的运算

语法：${运算表达式}，EL表达式支持以下运算符：
关系运算、逻辑运算、 算数运算、empty运算、三元运算、“.”点运算和“[ ]”中括号运算

<body>
    <%
        Map<String,Object> map = new HashMap<String, Object>();
        map.put("a.a.a", "aaaValue");
        map.put("b+b+b", "bbbValue");
        map.put("c-c-c", "cccValue");
        request.setAttribute("map", map);
    %>
    <%--特殊的key需要去掉最开始的"."并使用中括号和单引号(双引号)包起来--%>
    ${ map['a.a.a'] } <br> <%--如果不加中括号则相当于三个.运算--%> //错误的是 ${map.a.a.a}
    ${ map["b+b+b"] } <br> <%--如果不加中括号则相当于三个+运算--%>
    ${ map['c-c-c'] } <br> <%--如果不加中括号则相当于三个-运算--%>
</body>

五、EL表达式的11个隐含对象

EL表达式中的11个隐含对象是EL表达式自己定义的，可以直接使用
变量                   类型                        作用
pageContext          PageContextImpl        它可以获取 jsp 中的九大内置对象
pageScope            Map<String,Object>     它可以获取 pageContext 域中的数据
requestScope         Map<String,Object>     它可以获取 Request 域中的数据
sessionScope         Map<String,Object>     它可以获取 Session 域中的数据
applicationScope     Map<String,Object>     它可以获取 ServletContext 域中的数据
param                Map<String,String>     它可以获取请求参数的值
paramValues          Map<String,String[]>   它也可以获取请求参数的值，获取多个值的时候使用。
header               Map<String,String>     它可以获取请求头的信息
headerValues         Map<String,String[]>   它可以获取请求头的信息，它可以获取多个值的情况
cookie               Map<String,Cookie>     它可以获取当前请求的 Cookie 信息
initParam            Map<String,String>     它可以获取在 web.xml 中配置的<context-param>上下文参数

1、EL 获取四个特定域中的属性

pageScope ====== pageContext 域
requestScope ====== Request 域
sessionScope ====== Session 域
applicationScope ====== ServletContext 域

<body>
    <%
        pageContext.setAttribute("key1", "pageContext1");
        pageContext.setAttribute("key2", "pageContext2");
        request.setAttribute("key2", "request");
        session.setAttribute("key2", "session");
        application.setAttribute("key2", "application");
    %>
    <%--  获取特定域中的属性  --%>
    ${ pageScope.key1 } <br>
    ${ applicationScope.key2 }
    <%--  若直接获取key1或key2依然按照之前范围从小到大检索，无法获取指定域  --%>
</body>

2、pageContext 对象的使用
1. 协议：
2. 服务器 ip：
3. 服务器端口：
4. 获取工程路径：
5. 获取请求方法：
6. 获取客户端 ip 地址：
7. 获取会话的 id 编号：

(3) param、paramValues对象的使用
<body>
    获取请求参数username的值：${ param.username } <br>
    获取请求参数password的值：${ param.password } <br>
    获取请求参数中第一个hobby的值：${ paramValues.hobby[0] } <br>
    获取请求参数中第二个hobby的值：${ paramValues.hobby[1] } <br>
    <%--  有多个同名的key时使用paramValues的索引值决定获取哪一个，使用param只可获取第一个  --%>
    使用param获取hobby的值：${ param.hobby } <br>
</body>

(4) header、headerValues对象的使用
<body>
    输出请求头[user-Agent]的值：${ header["User-Agent"] }<br>
    输出请求头中第一个[user-Agent]的值:${ headerValues["User-Agent"][0] }<br>
</body>

(5) cookie对象的使用
<body>
    获取Cookie的名称：${ cookie.JSESSIONID.name } <br>
    获取Cookie的值：${ cookie.JSESSIONID.value } <br>
</body>

(6) initParam对象的使用

<context-param>
    <param-name>username</param-name>
    <param-value>root</param-value>
</context-param>
<context-param>
    <param-name>url</param-name>
    <param-value>jdbc:mysql:///test</param-value>
</context-param>

<body>
    输出&lt;Context-param&gt;username的值：${ initParam.username } <br>
    输出&lt;Context-param&gt;url的值：${ initParam.url } <br>
</body>


JSTL

一、JSTL标签库简介

1、JSTL标签库全称是JSP Standard Tag Library，是一个不断完善的开放源代码的JSP标签库
2、EL表达式主要是为了替换JSP中的表达式脚本，JSTL标签库是为了替换代码脚本
3、JSTL由五个不同功能的标签库组成：
功能范围                      URI                           前缀
核心标签库--重点     http://java.sun.com/jsp/jstl/core         c


二、JSTL标签库的使用步骤
1、先导入JSTL标签库的jar包
2、在jsp页面中使用taglib指令引入标签库(可自动导包)
CORE 标签库
<%@ taglib prefix=“c” uri=“http://java.sun.com/jsp/jstl/core” %>
XML 标签库
<%@ taglib prefix=“x” uri=“http://java.sun.com/jsp/jstl/xml” %>
FMT 标签库
<%@ taglib prefix=“fmt” uri=“http://java.sun.com/jsp/jstl/fmt” %>
SQL 标签库
<%@ taglib prefix=“sql” uri=“http://java.sun.com/jsp/jstl/sql” %>
FUNCTIONS 标签库
<%@ taglib prefix=“fn” uri=“http://java.sun.com/jsp/jstl/functions” %>


三、core核心库的使用

1、<c:set/>标签，作用：可以往域中保存数据

① scope属性设置保存到哪个域，值如下：
page表示pageContext域(默认值)
request表示Request域
session表示Session域
application表示ServletContext域

② var属性设置key是多少
③ value属性设置value是多少

<body>
    保存之前：${ pageScope.name } <br>
    <c:set scope="page" var="name" value="Jaychou"/>
    保存之后：${ pageScope.name }<br>
</body>

2、 <c:if/>标签，作用：做if判断
test属性设置判断的条件，属性值使用EL表达式
注意：如果test属性值为真则执行if开始标签和结束标签中的语句，为假则不执行

<body>
    <c:if test="${ 1 == 1 }">
        test属性值为真，我执行
    </c:if>
    <c:if test="${ 1 != 1 }">
        test属性值为假，我不执行
    </c:if>
</body>


3、<c:choose>、<c:when>、<c:otherwise>标签，作用：多路判断，类似switch-case结构
① choose标签表示开始多路判断
② when标签表示每一种判断情况
test属性设置判断的条件，属性值使用EL表达式
注意：若test属性值为真，则执行when起始和结束标签中的语句
③ otherwise标签表示其余情况，若满足，则执行起始和结束标签中的语句
注意：
1.使用三种标签时标签里不能使用html注释，要使用jsp注释
2. when标签的父标签一定是choose标签
3. when标签是从上向下依次判断的，一旦有满足的就不会再判断剩余when标签

<body>
    <%
        request.setAttribute("grade", 55);
    %>
    <c:choose>
        <c:when test="${ requestScope.grade > 90 }">
            <div>绩点4.0</div>
        </c:when>
        <c:when test="{ requestScope.grade > 80 }">
            <h2>绩点3.0</h2>
        </c:when>
        <c:otherwise>
            <c:choose>
                <c:when test="{ requestScope.grade > 70 }">
                    <h2>绩点2.0</h2>
                </c:when>
                <c:otherwise>
                    绩点1.0或无
                </c:otherwise>
            </c:choose>
        </c:otherwise>
    </c:choose>
</body>

4、<c:forEach/>标签，作用：遍历输出(与foreach循环一样，自动的遍历到下一个数据)

（1）遍历1-10
<body>
    <%--
        begin属性设置开始的索引
        end属性设置结束的索引
        var属性表示循环的变量(当前正在遍历到的数据)，可任意取名
        循环的是foreach起始和结束标签中的内容
    --%>
    <c:forEach begin="1" end="10" var="i">
        第${i}行 
    </c:forEach>
</body>

2、遍历数组
<body>
    <%--
        items表示遍历的数据源
        var表示当前遍历到的数据，可任意取名
    --%>
    <%
        request.setAttribute("arr", new String[]{"周杰伦","昆凌","方文山"});
    %>
    <c:forEach items="${ requestScope.arr }" var="item">
        ${ item } <br>
    </c:forEach>
</body>

3、遍历Map集合

<body>
    <%
        Map<String, Object> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        map.put("key3", "value3");
        request.setAttribute("map", map);
    %>
    <c:forEach items="${ requestScope.map }" var="entry">
        ${entry.key} 等于 ${entry.value} <br>
        <%--  ${entry}会将所有数据以 key=value 格式输出  --%>
    </c:forEach>
</body>

4、遍历List集合，集合中存放Student类

<body>
    <%
        List<Student> studentList = new ArrayList<>();
        for (int i = 1; i <= 10; i++) {
            studentList.add(new Student(i,"username"+i ,"pass"+i,18+i,"phone"+i));
        }
        request.setAttribute("stus", studentList);
    %>
    <%--
        items 表示遍历的数据源
        var 表示遍历到的数据
        begin表示遍历的开始索引值(起始为0)，不写begin代表从第一个开始
        end 表示结束的索引值，不写end代表遍历到最后一个
        step 属性表示遍历的步长值，默认是1
        varStatus 属性表示当前遍历到的数据的状态
    --%>
    <c:forEach items="${requestScope.stus}" var="stu" begin="2"
                        end="7" step="2" varStatus="status">
            ${stu.id} <br>
            ${stu.username} <br>
            ${stu.password} <br>
            ${stu.age} <br>
            ${stu.phone} <br>
            ${status.step} <br> <%--还可获取更多状态，见下图--%>
    </c:forEach>
    <%--运行结果：从3输出到8，每隔两个输出，即只有3、5、7--%>
</body>
