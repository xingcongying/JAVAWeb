
一、会话技术

会话：一次会话中包含多次请求和响应
注：一次会话表示浏览器第一次给服务器发送请求，会话建立，直到有一方断开为止
功能：在一次会话的多次请求间共享数据
方式：
(1) 客户端会话技术：Cookie
(2) 服务器端会话技术：Session

二、Cookie

1、概念：将数据保存到客户端，客户端有了Cookie之后，每次请求都会发送给服务器
2、使用步骤：
(1) 创建Cookie对象，参数中绑定数据(键值对)
new Cookie(String name, String value);
(2) 客户端向服务器发送请求后，服务器向客户端发送Cookie对象
response.addCookie(Cookie cookie);
(3) 客户端收到Cookie后，再次发送请求时，服务器获取从客户端发来的Cookie对象
Cookie[] request.getCookies();
(4) 服务器得到Cookie对象后，使用getName与getValue方法得到Cookie对象的数据

@WebServlet("/CookieTest1")
public class CookieTest1 extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //1. 创建Cookie对象，参数类似键值对
        Cookie cookie = new Cookie("msg", "hello");
        //2. 客户端向浏览器发送Cookie
        response.addCookie(cookie);
    }
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}

获取cookie
@WebServlet("/CookieTest2")
public class CookieTest2 extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //3. 服务器获取Cookie对象
        Cookie[] cookies = request.getCookies();
        //4. 服务器获取Cookie对象的值
        for (Cookie cookie :
                cookies) {
            String name = cookie.getName();
            String value = cookie.getValue();
            System.out.println("获得的Cookie对象的值：" + name + ":" + value);
        }
    }
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request, response);
    }
}
上述程序原理：基于响应头set-cookie和请求头cookie实现


三、Cookie的细节

1.一次可以发送多个Cookie对象，使用response调用多次addCookie方法即可

2.Cookie在浏览器中保存的时间：
(1) 默认情况下，当浏览器关闭后，Cookie数据被销毁
(2) 持久化存储：
使用Cookie对象的setMaxAge(int seconds)方法：
a. 正数：将Cookie数据写到硬盘中存储，参数指定存活的秒数，时间到后，数据失效， 此时间指的是创建cookie后开始计时，并不是关闭浏览器后才开始计时
b. 负数：默认情况
c. 零：删除cookie信息

3.在Tomcat 8之后Cookie可以存中文，但特殊中文字符仍不支持，建议使用URL编码格式

4.Cookie的共享问题：
(1) 一个Tomcat服务器中，部署了多个web项目，这些web项目cookie的共享说明：
① 默认情况cookie无法共享
② 使用Cookie对象的setPath(String path)方法设置cookie的获取范围：
a. 默认情况，参数是web工程路径，只有这个工程才可以访问到，其余工程无法访问
b. 如果要共享，可以设置参数为”/” ( /被浏览器解析得到的地址为http://ip:port/ )
(2) 不同的Tomcat服务器间cookie的共享说明：
使用Cookie对象的setDomain(String path)方法，参数设置为一级域名，则一级域名相同的不同服务器之间Cookie可共享
如：setDomain(“.baidu.com”)，则tieba.baidu.com与news.baidu.com等的cookie可共享

四、Cookie的特点和作用
1.Cookie在客户端存储数据，客户端有了cookie之后，每次发送请求都会把cookie发送给服务器
2.浏览器对单个Cookie有大小限制(4KB)，对同一个域名下的总cookie数量也有限制(20个)
3.作用：
(1)Cookie一般用于存储少量的安全性较低的数据
(2)在不登陆的情况下，完成服务器对客户端的身份识别，如没有登录百度账号的前提下打开百 度，设置搜索引擎搜索时不提示，
以后打开浏览器访问百度时，不会再出现搜索提示框，
原 理：百度服务器将设置的Cookie信息保存到浏览器，下次访问百度时，百度服务器获取浏览 器的Cookie，根据Cookie的值决定要不要显示提示框

五、Cookie 生命控制

Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）
setMaxAge()
正数，表示在指定的秒数后过期
负数，表示浏览器一关，Cookie 就会被删除（默认值是-1）
零，表示马上删除 Cookie


六、Session的介绍
1、概念：Session是服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存到服务器 端，常用来保存用户登录之后的信息

      1、Session 就一个接口（HttpSession）。
      2、Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。
      3、每个客户端都有自己的一个 Session 会话。
      4、Session 会话中，我们经常用来保存用户登录之后的信息。
      
2、快速入门：

(1) 获取HttpSession对象
HttpSession session = request.getSession();
注：①第一次调用表示创建Session会话
②之后调用都是获取前面创建好的Session会话对象

(2) 使用HttpSession对象的方法
void setAttribute(String name, Object value);
Object getAttribute(String name);
void removeAttribute(String name);

Session 技术，底层其实是基于 Cookie 技术来实现的。

七、Session的细节
1、Session被销毁的方式
(1)服务器关闭
(2)Session对象调用invalidate()
(3)Session默认失效时间：30分钟，可以到web.xml中修改配置文件修改默认失效时间

2、客户端关闭之后服务器不关闭，两次获取的Session是否为同一个？
(1) 默认情况下，不是，Cookie消失，其中的Session自然也消失
(2) 如果需要相同，进行如下操作：

3、客户端不关闭，服务器关闭之后，两次获取的Session是否为同一个？
不是同一个Session，但是为了保证数据的不丢失，Tomcat服务器自动完成：
(1) Session的钝化：
在服务器正常关闭之前，将Session对象序列化到硬盘上
(2) Session的活化：
在服务器启动之后，将Session文件反序列化成为内存中的Session对象
注意：也就是说即使获取的不是同一个Session，但是Session中的数据都是相同的

4、Session的特点
(1) Session用于存储一次会话的多次请求数据，存在服务器端，一次会话只有一个session对象
(2) Session可以存储任意类型，任意大小的数据

5、Session与Cookie的区别：
(1) Session存储数据在服务器端，Cookie在客户端
(2) Session没有数据大小的限制，Cookie有(4KB)
(3) Session数据安全，Cookie相对不安全
